
import React, { useState } from 'react';
import { ethers } from 'ethers';
import ZKVerifierABI from '../abi/CollateralZKVerifier.json'; // ABI of CollateralZKVerifier
// (Place the ABI generated by Hardhat / ethers here)

function CollateralMint({ contractAddress }) {
  const [threshold, setThreshold] = useState('');
  const [proofFile, setProofFile] = useState(null);
  const [message, setMessage] = useState('');

  // Handle proof JSON upload
  const onProofChange = (e) => {
    if (e.target.files[0]) {
      setProofFile(e.target.files[0]);
    }
  };

  // Submit proof and call mint
  const handleMint = async () => {
    if (!proofFile || !threshold) {
      setMessage("Please set threshold and upload proof JSON.");
      return;
    }
    try {
      // Read proof JSON
      const text = await proofFile.text();
      const proofData = JSON.parse(text);
      const { proof, publicSignals } = proofData;
      // Flatten proof parameters
      const a = [proof.pi_a[0], proof.pi_a[1]];
      const b = [
        [proof.pi_b[0][0], proof.pi_b[0][1]],
        [proof.pi_b[1][0], proof.pi_b[1][1]]
      ];
      const c = [proof.pi_c[0], proof.pi_c[1]];

      // Connect to Ethereum
      await window.ethereum.request({ method: 'eth_requestAccounts' });
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const zkContract = new ethers.Contract(contractAddress, ZKVerifierABI, signer);

      // Call mintSynth on contract
      const tx = await zkContract.mintSynth(a, b, c, threshold);
      await tx.wait();
      setMessage("Mint successful! Synth tokens have been issued.");
    } catch (err) {
      console.error(err);
      setMessage("Mint failed: " + err.message);
    }
  };

  return (
    <div>
      <h2>Mint Synth with ZK Collateral Proof</h2>
      <div>
        <label>Threshold: </label>
        <input type="number" value={threshold}
               onChange={e => setThreshold(e.target.value)} />
      </div>
      <div>
        <label>Upload Proof JSON:</label>
        <input type="file" accept=".json" onChange={onProofChange} />
      </div>
      <button onClick={handleMint}>Mint Synth Token</button>
      {message && <p>{message}</p>}
    </div>
  );
}

export default CollateralMint;
